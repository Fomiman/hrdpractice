/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.60
 * Generated at: 2022-11-21 03:38:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class insertWorkprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/footer.jsp", Long.valueOf(1664453036000L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1664540740000L));
    _jspx_dependants.put("/dbcon.jsp", Long.valueOf(1664436254000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>작업공정등록</title>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- <script src=\"http://code.jquery.com/jquery-latest.js\"></script>\r\n");
      out.write("        jquery 사용 type=\"reset\" 버튼 눌렀을때 이벤트 생성\r\n");
      out.write("        <script>\r\n");
      out.write("            $(function(){\r\n");
      out.write("                $(\"#rewriteButton\").click(function(){\r\n");
      out.write("                    if(!confirm(\"정보를 지우고 처음부터 다시 입력 합니다!\")){\r\n");
      out.write("                    \treturn false;/* 취소 선택시 reset 취소, 확인 선택시 reset 진행*/\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("            })\r\n");
      out.write("\t\t</script> -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>헤더</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("UTF-8");
/* 사용되는 페이지들의 인코딩 타입을 UTF-8로 설정해준다. 자바부분에 적용되는 건가 어딘지 헷갈리는데 일단 적용됨 */

String url = "jdbc:oracle:thin:@//localhost:1521/xe";
/* 오라클 서버 접속용 url */

Class.forName("oracle.jdbc.OracleDriver");
/* 오라클을 사용하기 위한 드라이버를 불러옴 */

Connection con = DriverManager.getConnection(url,"system","1234");
/* Connection 객체 생성하여 오라클 서버에 접속 */

/* 이후 sql문 사용하기 위한 객체 2가지 생성 */
Statement stmt = con.createStatement();
PreparedStatement ps = null;

ResultSet rs = null;

/* sql문 자주 사용하기 때문에 미리 만들어준 String 타입 객체 뒤에서 sql문을 넣어서 사용 */
String sql = "";


      out.write("\r\n");
      out.write("\r\n");
      out.write(" <!-- DB연결 및 사용하기 위한 페이지를 연결해둔다 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./script/style.css\"> <!-- 스타일CSS 파일을 연동 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"./script/function.js\"></script><!-- 펑션넣은 js파일 -->\r\n");
      out.write("<!-- 차후 만드는 페이지는 모두 header를 body에 포함하기 때문에 \r\n");
      out.write("위 세가지를 header에 연결시켜두면 페이지마다 따로 연결해줄 필요가 없다. -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<header>\r\n");
      out.write("\t<div id=\"headDiv\">\r\n");
      out.write("\t\t<h2>(과정평가형 정보처리산업기사)스마트공장 공정관리 프로그램 ver 2019-09</h2>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<nav>\r\n");
      out.write("\t\t<a href=\"productLookup.jsp\">제품조회</a>\r\n");
      out.write("\t\t<a href=\"orderLookup.jsp\">작업지시서조회</a>\r\n");
      out.write("\t\t<a href=\"insertWorkprocess.jsp\">작업공정등록</a>\r\n");
      out.write("\t\t<a href=\"workprocessLookup.jsp\">작업공정조회</a>\r\n");
      out.write("\t\t<a href=\"index.jsp\">홈으로</a>\r\n");
      out.write("\t</nav>\r\n");
      out.write("</header>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("\t<h1>작업공정등록</h1>\r\n");
      out.write("\t<form action=\"insertProcessPro.jsp\" method=\"post\" name=\"insertForm\">\r\n");
      out.write("\t\t<table class=\"insert1table\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>작업지시번호</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"w_workno\" value=\"\" />예)20190001\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>재료준비</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p1\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p1\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>인쇄공정</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p2\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p2\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>코팅공정</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p3\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p3\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>합지공정</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p4\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p4\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>접합공정</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p5\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p5\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>포장적재</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"Y\" name=\"p_p6\" />완료\r\n");
      out.write("\t\t\t\t\t<input type=\"radio\" value=\"N\" name=\"p_p6\" />작업중\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>최종작업일자</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"w_lastdate\" value=\"\">예)20190101\r\n");
      out.write("\t\t\t\t\t<!-- 입력형태 및 오라클에서 타입이 char이라서 text 타입으로 입력받음 -->\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>최종작업시간</th>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"w_lasttime\" value=\"\">예)1300\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td colspan=\"2\" align=\"center\">\r\n");
      out.write("\t\t\t\t\t<input type=\"submit\" name=\"insertSubmit\" value=\"공정등록\" onclick=\"insertCheck(); return false;\"/>\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" name=\"insertUpdate\" value=\"공정수정\" onclick=\"return updateCheck(this.form);\"/><!-- 펑션에서 form action 경로 변경 -->\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" name=\"rewrite\" value=\"다시쓰기\" id=\"rewriteButton\" onclick=\"rewrite1();\"></input>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>푸터</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<footer>\r\n");
      out.write("\tHRDKOREA Copyright&copy;2019 All reserved. Human Resource Development Service of Korea.\r\n");
      out.write("</footer>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");

/* ※★☆ 필수 : DB연결 해제 */
try{
	if(con != null) con.close();
	if(stmt != null) stmt.close();
	if(ps != null) ps.close();
	if(rs != null) rs.close();
	/* dbcon.jsp에서 만든 4가지 DB연결&이용하는 객체들 닫아준다. */
}catch(Exception e){ 
	e.printStackTrace();
	/* 기본적인 오류메세지로 설정해뒀다. 나중에 따로 뭔가를 써서 바꾸는지는 아직 모름*/
}


      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
